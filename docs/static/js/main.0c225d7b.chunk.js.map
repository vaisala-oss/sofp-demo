{"version":3,"sources":["MyMap.js","App.js","serviceWorker.js","index.js"],"names":["MyMap","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","osmTileGrid","source","tileGrid","origin","getOrigin","resolutions","getResolutions","myLargerTileGrid","TileGrid","tileSize","featuresLayer","layer","features","weatherSource","format","strategy","loadingstrategy","loader","extent","resolution","proj","time","end","moment","start","add","url","toISOString","transformExtent","join","xhr","XMLHttpRequest","open","onError","removeLoadedExtent","onerror","onload","status","getFormat","readFeatures","responseText","dataProjection","featureProjection","addFeatures","send","pointStyle","style","image","radius","fill","color","stroke","width","weatherLayer","map","Map","target","refs","mapContainer","layers","view","View","center","fromLonLat","zoom","minZoom","maxZoom","xhttp","onreadystatechange","readyState","capabilities","read","opts","optionsFromCapabilities","matrixSet","requestEncoding","wmtsLayer","setZIndex","addLayer","on","handleMapClick","bind","setState","prevProps","prevState","state","setSource","props","routes","event","clickedCoordinate","getCoordinateFromPixel","pixel","clickedPointGeom","geom","console","log","react_default","a","createElement","ref","React","Component","App","className","MyMap_MyMap","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0c225d7b.chunk.js","sourcesContent":["//externals\nimport React from 'react';\n\n//open layers and styles\nimport { Map, View } from 'ol';\nimport * as source from 'ol/source';\nimport * as format from 'ol/format';\nimport * as layer from 'ol/layer';\nimport { transformExtent, fromLonLat } from 'ol/proj';\nimport * as geom from 'ol/geom';\nimport * as style from 'ol/style';\nimport TileGrid from 'ol/tilegrid/TileGrid';\nimport * as loadingstrategy from 'ol/loadingstrategy';\nimport { optionsFromCapabilities } from 'ol/source/WMTS';\n\nimport * as _ from 'lodash';\n\nimport * as moment from 'moment';\n\nimport 'ol/ol.css';\n\n\n// Adapted from https://taylor.callsen.me/using-reactflux-with-openlayers-3-and-other-third-party-libraries/\nexport class MyMap extends React.Component {\n \n  componentDidMount() {\n    var osmTileGrid = new source.OSM().tileGrid;\n    var origin = osmTileGrid.getOrigin(0);\n    var resolutions = [osmTileGrid.getResolutions()[8]];\n\n    var myLargerTileGrid = new TileGrid({\n        origin: origin,\n        resolutions: resolutions,\n        tileSize: 512\n    });\n\n    // create feature layer and vector source\n    var featuresLayer = new layer.Vector({\n      source: new source.Vector({\n        features:[]\n      })\n    });\n\n    var weatherSource = new source.Vector({\n      format: new format.GeoJSON(),\n      strategy: new loadingstrategy.tile(myLargerTileGrid),\n      loader: function(extent, resolution, proj) {\n        const time = {\n          end: moment.utc()\n        };\n        time.start = moment.utc(time.end).add(-1, 'days');\n\n        const url = \n          'http://beta.fmi.fi/data/3/wfs/sofp/collections/opendata_1m/items?'+\n          [\n            'ParameterName=Temperature',\n            'time='+time.start.toISOString()+'/'+time.end.toISOString(),\n            'bbox='+transformExtent(extent, 'EPSG:3857', 'EPSG:4326').join(','),\n            'limit=100'\n          ].join('&');\n\n\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', url);\n        var onError = function() {\n          weatherSource.removeLoadedExtent(extent);\n        }\n        xhr.onerror = onError;\n        xhr.onload = function() {\n          if (xhr.status === 200) {\n            const features = weatherSource.getFormat().readFeatures(xhr.responseText, {\n              dataProjection: 'EPSG:4326',\n              featureProjection: 'EPSG:3857'\n            });\n\n            weatherSource.addFeatures(features);\n          } else {\n             onError();\n          }\n        }\n        xhr.send();\n      }\n    });\n\n    var pointStyle = new style.Style({\n      image: new style.Circle({\n        radius: 7,\n        fill: new style.Fill({color: 'black'}),\n        stroke: new style.Stroke({\n          color: [250, 210, 210], width: 2\n        })\n      })\n    })\n    var weatherLayer = new layer.Vector({\n      source: weatherSource,\n      style: pointStyle\n    });\n\n\n    // create map object with feature layer\n    var map = new Map({\n      target: this.refs.mapContainer,\n      layers: [\n        featuresLayer,\n        weatherLayer\n      ],\n      view: new View({\n        center: fromLonLat([24.95, 60.23]),\n        zoom: 11,\n        minZoom: 8,\n        maxZoom: 20\n      })\n    });\n\n    var xhttp = new XMLHttpRequest();\n    xhttp.onreadystatechange = function() {\n      if (this.readyState === 4 && this.status === 200) {\n        var parser = new format.WMTSCapabilities();\n        var capabilities = parser.read(this.responseText);\n        var opts = optionsFromCapabilities(capabilities, {\n            layer: 'taustakartta',\n            matrixSet: 'WGS84_Pseudo-Mercator',\n            requestEncoding: 'REST'\n        });\n        var wmtsLayer = new layer.Tile({\n            source: new source.WMTS(opts)\n        });\n        wmtsLayer.setZIndex(-1);\n        map.addLayer(wmtsLayer);\n      }\n    };\n    xhttp.open(\"GET\", \"https://avoin-karttakuva.maanmittauslaitos.fi/avoin/wmts/1.0.0/WMTSCapabilities.xml\", true);\n    xhttp.send();\n\n\n    map.on('click', this.handleMapClick.bind(this));\n\n    // save map and layer references to local state\n    this.setState({ \n      map: map,\n      featuresLayer: featuresLayer\n    });\n  }\n\n  // pass new features from props into the OpenLayers layer object\n  componentDidUpdate(prevProps, prevState) {\n    this.state.featuresLayer.setSource(\n      new source.Vector({\n        features: this.props.routes\n      })\n    );\n  }\n\n  handleMapClick(event) {\n    // derive map coordinate (references map from Wrapper Component state)\n    var clickedCoordinate = this.state.map.getCoordinateFromPixel(event.pixel);\n\n    // create Point geometry from clicked coordinate\n    var clickedPointGeom = new geom.Point( clickedCoordinate );\n    console.log(clickedPointGeom);\n    console.log(event);\n\n    // TODO: show data\n  }\n\n  render () {\n    return (\n      <div ref=\"mapContainer\"> </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { MyMap } from './MyMap';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <MyMap/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}