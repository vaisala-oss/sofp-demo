{"version":3,"sources":["MyMap.js","App.js","serviceWorker.js","index.js"],"names":["ReactChartkick","addAdapter","Chart","MyMap","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","map","popup","hdms","features","temperatureChart","inherits","createClass","key","value","osmTileGrid","source","tileGrid","origin","getOrigin","resolutions","getResolutions","popupContainer","refs","mapPopup","popupCloser","mapPopupCloser","overlay","Overlay","element","autoPan","autoPanAnimation","duration","onclick","setPosition","undefined","blur","myLargerTileGrid","TileGrid","tileSize","weatherSource","format","strategy","loadingstrategy","loader","extent","resolution","proj","time","end","moment","start","add","url","toISOString","transformExtent","join","xhr","XMLHttpRequest","open","onError","removeLoadedExtent","onerror","onload","status","getFormat","readFeatures","responseText","dataProjection","featureProjection","addFeatures","send","pointStyle","style","image","radius","fill","color","stroke","width","weatherLayer","layer","Map","target","mapContainer","layers","overlays","view","View","center","fromLonLat","zoom","minZoom","maxZoom","xhttp","onreadystatechange","readyState","capabilities","read","opts","optionsFromCapabilities","matrixSet","requestEncoding","wmtsLayer","setZIndex","addLayer","on","openPopup","bind","setState","evt","coordinate","ext","getFeaturesInExtent","length","toStringHDMS","toLonLat","_","memo","f","values_","resultTime","result","react_default","a","createElement","ref","id","className","href","react_chartkick_esm","data","React","Component","App","MyMap_MyMap","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.97f5302a.chunk.js","sourcesContent":["//externals\nimport React from 'react';\n\n//open layers and styles\nimport { Map, View } from 'ol';\nimport * as source from 'ol/source';\nimport * as format from 'ol/format';\nimport * as layer from 'ol/layer';\nimport { transformExtent, fromLonLat, toLonLat } from 'ol/proj';\nimport * as style from 'ol/style';\nimport * as extent from 'ol/extent';\nimport TileGrid from 'ol/tilegrid/TileGrid';\nimport * as loadingstrategy from 'ol/loadingstrategy';\nimport { optionsFromCapabilities } from 'ol/source/WMTS';\n\nimport Overlay from 'ol/Overlay';\nimport {toStringHDMS} from 'ol/coordinate.js';\n\nimport ReactChartkick, { LineChart } from 'react-chartkick'\nimport Chart from 'chart.js'\n\nimport * as moment from 'moment';\n\nimport * as _ from 'lodash';\n\nimport 'ol/ol.css';\nimport './MyMap.css';\n\nReactChartkick.addAdapter(Chart);\n\n// Adapted from https://taylor.callsen.me/using-reactflux-with-openlayers-3-and-other-third-party-libraries/\nexport class MyMap extends React.Component {\n \n  constructor(props) {\n    super(props);\n    this.state = {\n      map: null,\n      popup: {\n        hdms: null,\n        features: [],\n        temperatureChart: {}\n      }\n    }\n  }\n\n  componentDidMount() {\n    var osmTileGrid = new source.OSM().tileGrid;\n    var origin = osmTileGrid.getOrigin(0);\n    var resolutions = [osmTileGrid.getResolutions()[8]];\n\n    const popupContainer = this.refs.mapPopup;\n    const popupCloser = this.refs.mapPopupCloser;\n    \n    var overlay = new Overlay({\n      element: popupContainer,\n      autoPan: true,\n      autoPanAnimation: {\n        duration: 250\n      }\n    });\n\n    popupCloser.onclick = function() {\n      overlay.setPosition(undefined);\n\n      popupCloser.blur();\n      return false;\n    };\n\n    var myLargerTileGrid = new TileGrid({\n        origin: origin,\n        resolutions: resolutions,\n        tileSize: 512\n    });\n\n    var weatherSource = new source.Vector({\n      format: new format.GeoJSON(),\n      strategy: new loadingstrategy.tile(myLargerTileGrid),\n      loader: function(extent, resolution, proj) {\n        const time = {\n          end: moment.utc()\n        };\n        time.start = moment.utc(time.end).add(-2, 'days');\n\n        const url = \n          // This is a nasty hack to get around beta.fmi.fi's lack of HTTPS support\n          //'https://cors-anywhere.herokuapp.com/' +\n          'http://beta.fmi.fi/data/3/wfs/sofp/collections/opendata_1h/items?'+\n          [\n            'observedPropertyName=Temperature',\n            'time='+time.start.toISOString()+'/'+time.end.toISOString(),\n            'bbox='+transformExtent(extent, 'EPSG:3857', 'EPSG:4326').join(','),\n            'limit=500'\n          ].join('&');\n\n\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', url);\n        var onError = function() {\n          weatherSource.removeLoadedExtent(extent);\n        }\n        xhr.onerror = onError;\n        xhr.onload = function() {\n          if (xhr.status === 200) {\n            const features = weatherSource.getFormat().readFeatures(xhr.responseText, {\n              dataProjection: 'EPSG:4326',\n              featureProjection: 'EPSG:3857'\n            });\n\n            weatherSource.addFeatures(features);\n          } else {\n             onError();\n          }\n        }\n        xhr.send();\n      }\n    });\n\n    var pointStyle = new style.Style({\n      image: new style.Circle({\n        radius: 7,\n        fill: new style.Fill({color: 'black'}),\n        stroke: new style.Stroke({\n          color: [250, 210, 210], width: 2\n        })\n      })\n    })\n    var weatherLayer = new layer.Vector({\n      source: weatherSource,\n      style: pointStyle\n    });\n\n\n    // create map object with feature layer\n    var map = new Map({\n      target: this.refs.mapContainer,\n      layers: [\n        weatherLayer\n      ],\n      overlays: [overlay],\n      view: new View({\n        center: fromLonLat([24.95, 60.23]),\n        zoom: 11,\n        minZoom: 8,\n        maxZoom: 20\n      })\n    });\n\n    var xhttp = new XMLHttpRequest();\n    xhttp.onreadystatechange = function() {\n      if (this.readyState === 4 && this.status === 200) {\n        var parser = new format.WMTSCapabilities();\n        var capabilities = parser.read(this.responseText);\n        var opts = optionsFromCapabilities(capabilities, {\n            layer: 'taustakartta',\n            matrixSet: 'WGS84_Pseudo-Mercator',\n            requestEncoding: 'REST'\n        });\n        var wmtsLayer = new layer.Tile({\n            source: new source.WMTS(opts)\n        });\n        wmtsLayer.setZIndex(-1);\n        map.addLayer(wmtsLayer);\n      }\n    };\n    xhttp.open(\"GET\", \"https://avoin-karttakuva.maanmittauslaitos.fi/avoin/wmts/1.0.0/WMTSCapabilities.xml\", true);\n    xhttp.send();\n\n\n    map.on('singleclick', this.openPopup.bind(this));\n\n    // save map and layer references to local state\n    this.setState({ \n      map,\n      weatherSource,\n      popupCloser,\n      overlay\n    });\n  }\n\n  openPopup(evt) {\n    const popup = this.state.popup;\n\n    var coordinate = evt.coordinate;\n    var ext = extent.boundingExtent([coordinate]);\n\n    ext = extent.buffer(ext, 500);\n\n    popup.features = this.state.weatherSource.getFeaturesInExtent(ext);\n    popup.temperatureChart = {};\n    if (popup.features.length === 0) {\n      this.state.popupCloser.onclick();\n      return;\n    }\n\n    popup.hdms = toStringHDMS(toLonLat(coordinate));\n    \n    popup.temperatureChart = _.reduce(popup.features, (memo, f) => { memo[f.values_.resultTime] = f.values_.result; return memo;}, {});\n\n    this.state.overlay.setPosition(coordinate);\n    this.setState({ popup });\n  }\n\n  render () {\n    return (\n      <div>\n        <div ref=\"mapContainer\">\n        </div>\n        <div ref=\"mapPopup\" id=\"popup\" className=\"ol-popup\">\n          <a href=\"#close-popup\" ref=\"mapPopupCloser\" id=\"popup-closer\" className=\"ol-popup-closer\">&nbsp;</a>\n          <div id=\"popup-content\">\n            <p>You clicked here:</p>\n            <code>{this.state.popup.hdms}</code>\n            <h3>Temperature</h3>\n            <LineChart data={this.state.popup.temperatureChart} />\n            \n          </div>\n        </div>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { MyMap } from './MyMap';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <MyMap/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}